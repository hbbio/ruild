# ruild default build recipes (Windows)
# Edit this file to suit your tools and workflow.
# Placeholders:
#   %<ext> -> "<base><ext>" (e.g. %pdf -> "doc.pdf")
#   %      -> <base>       (e.g. % -> doc.)

# ── Documents (Pandoc, Asciidoctor, TeX) ─────────────────────────────────────
md:        pandoc -N -o %pdf %md
mdhtml:    pandoc -s -o %html %md
mddocx:    pandoc -o %docx %md
mdepub:    pandoc -o %epub %md
mdodt:     pandoc -o %odt %md
mdreveal:  pandoc -t revealjs -s -o %html %md
mdbeamer:  pandoc -t beamer -o %pdf %md
mdman:     pandoc -s -t man -o %man %md
rst:       pandoc -N -o %pdf %rst
adoc:      asciidoctor -o %html %adoc
adocpdf:   asciidoctor-pdf -o %pdf %adoc
tex:       pdflatex %tex
texxelatex: xelatex %tex
htmldoc:   wkhtmltopdf %html %pdf
txt:       pandoc -o %pdf %txt

# ── Jupyter / notebooks ──────────────────────────────────────────────────────
ipynbhtml: jupyter nbconvert --to html %ipynb
ipynbpdf:  jupyter nbconvert --to pdf %ipynb
ipynbmd:   jupyter nbconvert --to markdown --output %md %ipynb

# ── Graphs and Diagrams ─────────────────────────────────────────────────────
dot:       dot -Tpng -o %png %dot
dotpdf:    dot -Tpdf -o %pdf %dot
dotsvg:    dot -Tsvg -o %svg %dot
puml:      plantuml -tpng -o . %puml
pumlsvg:   plantuml -tsvg -o . %puml
pumlpdf:   plantuml -tpdf -o . %puml
mmd:       mmdc -i %mmd -o %png
mmdsvg:    mmdc -i %mmd -o %svg
msc:       mscgen -T png -o %png %msc
drawio:    drawio -x -f png -o %png %drawio
drawiosvg: drawio -x -f svg -o %svg %drawio
svgtopng:  inkscape %svg --export-type=png --export-filename=%png
svgtopdf:  inkscape %svg --export-type=pdf --export-filename=%pdf

# ── Plots ───────────────────────────────────────────────────────────────────
gnuplot:   gnuplot -e "set terminal pngcairo size 1600,900; set output '%png';" %gnuplot
plt:       gnuplot -e "set terminal pngcairo size 1600,900; set output '%png';" %plt

# ── Programming — compile/build/run common languages ────────────────────────
c:         gcc -Wall %c -o %out.exe
cc:        gcc -Wall %c -o %out.exe
cpp:       g++ -Wall %cpp -o %out.exe
cxx:       g++ -Wall %cxx -o %out.exe
rs:        rustc -O %rs -o %out.exe
rsrun:     rustc %rs -o %out.exe && %out.exe
cargo:     cargo build
cargotest: cargo test
go:        go build -o %out.exe %go
gotest:    go test ./...
hs:        ghc -O2 %hs -o %out.exe
ml:        ocamlopt str.cmxa unix.cmxa %ml -o %out.exe
nim:       nim c -d:release -o:%out.exe %nim
swift:     swiftc %swift -o %out.exe
kt:        kotlinc %kt -include-runtime -d %out.jar
java:      javac %java
jar:       jar cfe %jar Main %class
scala:     scalac %scala
ts:        deno bundle %ts %js
tsc:       tsc %ts --outFile %js
esbuild:   esbuild %js --bundle --minify --outfile=%min.js
rollup:    rollup %js -c --file %min.js
uglify:    terser %js -o %min.js -mc
js:        node %js
py:        py %py
pytest:    pytest -q
ps1:       powershell -ExecutionPolicy Bypass -File %ps1
bat:       cmd /c %bat
rb:        ruby %rb
pl:        perl %pl
php:       php %php
lua:       lua %lua

# ── Linters / Formatters ────────────────────────────────────────────────────
eslint:    eslint --fix %js
ruff:      ruff check --fix %py
black:     black %py
flake8:    flake8 %py
mypy:      mypy %py
shellcheck: shellcheck %sh > %txt

# ── Data conversion ─────────────────────────────────────────────────────────
jsonpretty: jq . %json > %txt
jsonmin:   jq -c . %json > %min.json
yamljson:  yq -o=json %yaml > %json
ymljson:   yq -o=json %yml > %json
jsontoyaml: yq -P %json > %yaml
tomljson:  yq -p=toml -o=json %toml > %json
jsontoml:  yq -p=json -o=toml %json > %toml

# ── Images and media ────────────────────────────────────────────────────────
pngjpg:    magick %png %jpg
jpgpng:    magick %jpg %png
heicjpg:   magick %heic %jpg
jpgwebp:   cwebp -q 90 %jpg -o %webp
webpjpg:   dwebp %webp -o %jpg
wavmp3:    ffmpeg -y -i %wav %mp3
mp3wav:    ffmpeg -y -i %mp3 %wav
movmp4:    ffmpeg -y -i %mov -vcodec h264 -acodec aac %mp4
mp4gif:    ffmpeg -y -i %mp4 -vf fps=12,scale=640:-2:flags=lanczos %gif
gifmp4:    ffmpeg -y -i %gif -movflags faststart -pix_fmt yuv420p %mp4

# ── Archives (examples use explicit inputs; avoid bare %):
# zip:      powershell -NoProfile -Command Compress-Archive -Path "src","README.md" -DestinationPath %zip -Force
# tar:      tar.exe -cvf %tar src README.md
# tgz:      tar.exe -czvf %tgz src README.md
# 7z:       7z a %7z src README.md

# ── Containers / Cloud ─────────────────────────────────────────────────────-
dockerfile: docker build -f %dockerfile .
compose:   docker compose up -d
tfplan:    terraform.exe plan
tffmt:     terraform.exe fmt -recursive

# ── Project-aware helpers (trigger via file):
# Note: These run best when invoked on their project config files.
#   book.toml   -> mdbook build        (handled automatically by ruild)
#   mkdocs.yml  -> mkdocs build        (handled automatically by ruild)
#   conf.py     -> sphinx-build ...    (handled automatically by ruild)
#   Doxyfile    -> doxygen Doxyfile    (handled automatically by ruild)
proto:     protoc -I . --python_out=. %proto

# ── Project-aware rules (match by filename) ─────────────────────────────────
file:book.toml: mdbook build
file:mkdocs.yml: mkdocs build
file:mkdocs.yaml: mkdocs build
file:conf.py: sphinx-build -b html . _build/html
file:Doxyfile*: doxygen {{file}}

# Docker Compose helpers
file:docker-compose.yml: docker compose up -d
file:docker-compose.yml -down: docker compose down
file:docker-compose.yml -build: docker compose build
file:docker-compose.yml -pull: docker compose pull
file:docker-compose.yml -logs: docker compose logs -f
file:docker-compose.yml -ps: docker compose ps
file:docker-compose.yml -stop: docker compose stop
file:docker-compose.yml -start: docker compose start
file:docker-compose.yml -restart: docker compose restart
file:docker-compose.yml -recreate: docker compose up -d --force-recreate
file:docker-compose.yml -prune: docker compose down --volumes --remove-orphans

file:compose.yml: docker compose up -d
file:compose.yml -down: docker compose down
file:compose.yml -build: docker compose build
file:compose.yml -pull: docker compose pull
file:compose.yml -logs: docker compose logs -f
file:compose.yml -ps: docker compose ps
file:compose.yml -stop: docker compose stop
file:compose.yml -start: docker compose start
file:compose.yml -restart: docker compose restart
file:compose.yml -recreate: docker compose up -d --force-recreate
file:compose.yml -prune: docker compose down --volumes --remove-orphans

file:compose.yaml: docker compose up -d
file:compose.yaml -down: docker compose down
file:compose.yaml -build: docker compose build
file:compose.yaml -pull: docker compose pull
file:compose.yaml -logs: docker compose logs -f
file:compose.yaml -ps: docker compose ps
file:compose.yaml -stop: docker compose stop
file:compose.yaml -start: docker compose start
file:compose.yaml -restart: docker compose restart
file:compose.yaml -recreate: docker compose up -d --force-recreate
file:compose.yaml -prune: docker compose down --volumes --remove-orphans

# Node package scripts
file:package.json: {{pm}} run build
file:package.json -build: {{pm}} run build
file:package.json -start: {{pm_start}}
file:package.json -test: {{pm_test}}
file:package.json -install: {{pm_install}}
file:package.json -lint: {{pm}} run lint
file:package.json -format: {{pm}} run format
file:package.json -fmt: {{pm}} run format
file:package.json -dev: {{pm}} run dev
file:package.json -clean: {{pm}} run clean
